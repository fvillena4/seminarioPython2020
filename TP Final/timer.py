import PySimpleGUI as sg
import time

"""
 Timer Desktop Widget Creates a floating timer that is always on top of other windows You move it by grabbing anywhere on the window Good example of how to do a non-blocking, polling program using PySimpleGUI
 Something like this can be used to poll hardware when running on a Pi
 While the timer ticks are being generated by PySimpleGUI's "timeout" mechanism, the actual value
  of the timer that is displayed comes from the system timer, time.time().  This guarantees an
  accurate time value is displayed regardless of the accuracy of the PySimpleGUI timer tick. If
  this design were not used, then the time value displayed would slowly drift by the amount of time
  it takes to execute the PySimpleGUI read and update calls (not good!)
"""

class Reloj():


    layout = [[sg.Text('Reloj', text_color="red", justification='center')],
              [sg.Text('', size=(8, 2), font=('Helvetica', 20), justification='center', key='text')]]

    def time_as_int(self):
        return int(round(time.time()))

    def __init__(self, minutos):
        sg.theme('LightBlue1')
        self.current_time = 0
        self.end_time = 60 * minutos  # 60 por la cantidad de minutos que se quiere
        self.start_time = self.time_as_int()
        self.window = sg.Window('Running Timer', self.layout,
                                no_titlebar=True,
                                auto_size_buttons=False,
                                keep_on_top=True,
                                grab_anywhere=True,
                                element_padding=(0, 0))

    def correr(self):
        while self.current_time < self.end_time:
            # --------- Read and update window --------
            event, values = self.window.read(timeout=1)
            self.current_time = self.time_as_int() - self.start_time
            # print(self.current_time)
            # --------- Display timer in window --------
            self.window['text'].update('{:02d}:{:02d}:{:02d}'.format((self.current_time // 100) // 60, (self.current_time // 100) % 60, (self.current_time % 100)))
        self.window.close()


reloj = Reloj(0.5)
reloj.correr()
